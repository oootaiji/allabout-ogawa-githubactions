name: production
on: [push]


permissions:
    contents: read
    id-token: write

jobs:
  test:
    runs-on: ubuntu-20.04
    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test
          MYSQL_USER: test
          MYSQL_PASSWORD: test
          options: --health-cmd "mysqladmin ping -h localhost" --health-interval 20s --health-timeout 10s --health-retries 10

    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: build app for test
        uses: ./.github/actions/build
        with:
            APP_ENV: ${{ secrets.PRO_APP_ENV }}
            APP_KEY: ${{ secrets.PRO_APP_KEY }}
            APP_ENV_NAME: ".env.prd"
            COMPOSER_INSTALL_NO_DEV: "false"
      

      - name: wait for phpunit
        run: |
            docker
      - name: phpunit
        id: phpunit
        run: |
            if [ ! -d ./test-results ]; then mkdir ./test-results; fi
            ./vendor/bin/phpunit -d memory_limit=1G --stderr
        working-directory: src



  deploy:
    runs-on: ubuntu-20.04
    needs: test
    steps:
      - name: checkout
        uses: actions/checkout@v3
      - name: build app for deploy
        uses: ./.github/actions/build
        with:
            APP_ENV: ${{ secrets.PRO_APP_ENV }}
            APP_KEY: ${{ secrets.PRO_APP_KEY }}
            APP_ENV_NAME: ".env.prd"
            COMPOSER_INSTALL_NO_DEV: "true"
        

      - name: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
            workload_identity_provider: 'projects/246684855382/locations/global/workloadIdentityPools/my-pool/providers/my-provider'
            service_account: 'allabout-kubernetes@o-taiji.iam.gserviceaccount.com'
            export_default_credentials: true
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
    
      - name: Authorize Docker push
        run: |
            echo "${{ secrets.GKE_SERVICE_ACCOUNT_KEY }}" > allabout-kubernetes-service-account.json
            gcloud auth activate-service-account --key-file allabout-kubernetes-service-account.json
            gcloud auth configure-docker us-east1-docker.pkg.dev
      - name: setup docker env
        run: |
            echo "REPOSITORY_NAME=${GITHUB_REPOSITORY#${GITHUB_REPOSITORY_OWNER}/}" >> $GITHUB_ENV
            echo "IMAGE_TAG=${{ github.sha }}-${{ github.run_number }}" >> $GITHUB_ENV
      - name: docker build and push
        uses: docker/build-push-action@v3.2.0
        with:
            context: .
            push: true
            file: cd/${{ secrets.PRO_APP_ENV }}/php/Dockerfile
            build-args: |
                APP_ENV=${{ secrets.PRO_APP_ENV }}
                APP_PATH=/var/www/${{ env.REPOSITORY_NAME }}
            tags: |
                us-east1-docker.pkg.dev/o-taiji/${{ env.REPOSITORY_NAME }}/app:latest
                us-east1-docker.pkg.dev/o-taiji/${{ env.REPOSITORY_NAME }}/app:${{ env.IMAGE_TAG }}
      - name: set gke config
        run: |
            gcloud config set project o-taiji
            gcloud config set compute/region us-west1
            gcloud container clusters get-credentials ${{ env.REPOSITORY_NAME }}
      - name: set gke env
        run: | 
            echo "export DEPLOYMENT_CONTAINER_IMAGE=us-east1-docker.pkg.dev/o-taiji/${{ env.REPOSITORY_NAME }}/app:${{ env.IMAGE_TAG }}" >> $BASH_ENV
            echo "export CERT_DOMAIN=githubactions.ogawa.allabout.oootaiji.com" >> $BASH_ENV
            echo "export INGRESS_STATIC_IP=${{ env.REPOSITORY_NAME }}-ip" >> $BASH_ENV
            echo "export NAMESPACE=${{ env.REPOSITORY_NAME }}" >> $BASH_ENV
            source $BASH_ENV
      - name: deploy gke
        run: |
            envsubst < namespace.yaml > $HOME/namespace.yaml
            envsubst < service.yaml > $HOME/service.yaml
            envsubst < deployment.yaml > $HOME/deployment.yaml
            envsubst < ingress.yaml > $HOME/ingress.yaml
            envsubst < cert.yaml > $HOME/cert.yaml
            envsubst < pod-disruption-budget.yaml > $HOME/pod-disruption-budget.yaml
            kubectl apply -f $HOME/cert.yaml
            kubectl apply -f $HOME/deployment.yaml
            kubectl apply -f $HOME/service.yaml
            kubectl apply -f $HOME/ingress.yaml
            kubectl apply -f $HOME/pod-disruption-budget.yaml
        working-directory: cd/${{ secrets.PRO_APP_ENV }}/manifest
      - name: confirm deploy
        run: |
            kubectl rollout status deployment web


