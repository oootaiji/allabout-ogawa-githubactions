name: production
on: [push]




jobs:



  test:


    runs-on: ubuntu-20.04


    services:
      mysql:
        image: mysql:8.0
        ports:
          - 3306:3306
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test
          MYSQL_USER: test
          MYSQL_PASSWORD: test
          options: --health-cmd "mysqladmin ping -h localhost" --health-interval 20s --health-timeout 10s --health-retries 10


    steps:


      - name: setup - package update
        run: |
          sudo apt-get update
          sudo apt-get install -y git gettext
      - name: setup - install php
        uses: shivammathur/setup-php@v2
        with:
          php-version: 8.0
          extensions: mbstring, gd
      - name: setup - install composer
        run: |
          composer self-update --1
          composer --version
      - name: setup - install node
        uses: actions/setup-node@v3
        with:
          node-version: 18


      - name: build app - checkout
        uses: actions/checkout@v3
      - name: build app - laravel permission
        run: |
          chmod 777 -R storage
          chmod 777 -R bootstrap/cache
        working-directory: src
      - name: build app - laravel env
        run: |
          envsubst < .env.prd > .env
        working-directory: src
      - name: build app - cache composer install
        id: composer-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: composer-cache-v1-${{ hashFiles('src/composer.json') }}
          restore-keys: composer-cache-v1-
      - name: build app - composer install
        run: |
          if: steps.composer-cache.outputs.cache-hit != 'true'
          composer config discard-changes true
          composer install -n --prefer-dist
        working-directory: src
      - name: build app - cache npm install
        uses: actions/cache@v3
        with:
          path: vendor
          key: composer-cache-v1-${{ hashFiles('src/composer.json') }}
          restore-keys: composer-cache-v1-
      - name: build app - npm install
        run: |
          npm install
          npm run prod
        working-directory: src


      - name: wait for production test
        run: |
          docker
      - name: production test
        id: production-test
        run: |
          mkdir -p ./results
          ./vendor/bin/phpunit -d memory_limit=1G --stderr
      

      - name: build app - cache composer install --no-dev
        id: composer-nodev-cache
        uses: actions/cache@v3
        with:
          path: vendor
          key: composer-cache-v1-${{ hashFiles('src/composer.json') }}
          restore-keys: composer-cache-v1-
      - name: build app - composer install --no-dev
        if: steps.composer-nodev-cache.outputs.cache-hit != 'true'
        run: |
          composer config discard-changes true
          composer install -n --prefer-dist --no-dev
        working-directory: src
      

      - name: save artifact
        uses: actions/upload-artifact@v3
        with:
          name: workspace
          path: ./*



  deploy:
    runs-on: ubuntu-20.04


    needs: test


    steps:


      - name: get artifact
        uses: actions/download-artifact@v3
        with:
          name: workspace


      - name: gcloud auth
        run: |
          echo ${GKE_SERVICE_ACCOUNT_KEY} > $HOME/allabout-kubernetes-service-account.json
          gcloud auth activate-service-account --key-file $HOME/allabout-kubernetes-service-account.json
          gcloud auth configure-docker us-east1-docker.pkg.dev
        working-directory: src
      - name: docker build and push
        run: |
          docker build --file=cd/${PRO_APP_ENV}/php/Dockerfile \
            --build-arg APP_ENV=${PRO_APP_ENV} \
            --build-arg APP_PATH=/var/www/${CIRCLE_PROJECT_REPONAME} \
            -t ${CIRCLE_PROJECT_REPONAME} .
          docker tag ${CIRCLE_PROJECT_REPONAME} us-east1-docker.pkg.dev/o-taiji/${CIRCLE_PROJECT_REPONAME}/app:${CIRCLE_SHA1}
          docker push us-east1-docker.pkg.dev/o-taiji/${CIRCLE_PROJECT_REPONAME}/app:${CIRCLE_SHA1}
          docker tag ${CIRCLE_PROJECT_REPONAME} us-east1-docker.pkg.dev/o-taiji/${CIRCLE_PROJECT_REPONAME}/app:latest
          docker push us-east1-docker.pkg.dev/o-taiji/${CIRCLE_PROJECT_REPONAME}/app:latest
      

      - name: set gke config
        run: |
          gcloud config set project o-taiji
          gcloud config set compute/region us-west1
          gcloud container clusters get-credentials ${CIRCLE_PROJECT_REPONAME}
      - name: set gke env
        run: | 
          echo "export DEPLOYMENT_CONTAINER_IMAGE=us-east1-docker.pkg.dev/o-taiji/${CIRCLE_PROJECT_REPONAME}/app:${CIRCLE_SHA1}" >> $BASH_ENV
          echo "export CERT_DOMAIN=githubactions.ogawa.allabout.oootaiji.com" >> $BASH_ENV
          echo "export INGRESS_STATIC_IP=${CIRCLE_PROJECT_REPONAME}-ip" >> $BASH_ENV
          echo "export NAMESPACE=${CIRCLE_PROJECT_REPONAME}" >> $BASH_ENV
          source $BASH_ENV
      - name: deploy gke
        run: |
          cd cd/${PRO_APP_ENV}/manifest
          envsubst < namespace.yaml > $HOME/namespace.yaml
          envsubst < service.yaml > $HOME/service.yaml
          envsubst < deployment.yaml > $HOME/deployment.yaml
          envsubst < ingress.yaml > $HOME/ingress.yaml
          envsubst < cert.yaml > $HOME/cert.yaml
          envsubst < pod-disruption-budget.yaml > $HOME/pod-disruption-budget.yaml
          kubectl apply -f $HOME/cert.yaml
          kubectl apply -f $HOME/deployment.yaml
          kubectl apply -f $HOME/service.yaml
          kubectl apply -f $HOME/ingress.yaml
          kubectl apply -f $HOME/pod-disruption-budget.yaml
      - name: confirm deploy
        run: |
          kubectl rollout status deployment web


